package goldenrekt

	import (
		image "gno.land/r/stackdump/bmp"
	)

	// GoldenRekt represents an implementation of the ImageApi interface
	// that generates a recursive nested rectangle pattern scaled within
	// a 50x50 pixel grid.
	type GoldenRekt struct{}

	// Ensure GoldenRekt implements the ImageApi interface.
	var _ image.ImageApi = &GoldenRekt{}

	// init registers the GoldenRekt implementation with the image package
	// under the name "goldenrekt".
	func init() {
		image.Register("goldenrekt", GoldenRekt{})
	}

	// Description provides a brief description of the GoldenRekt pattern.
	func (GoldenRekt) Description() string {
		return "Nested Rect | Recursive pattern scaled within 50x50 pixels"
	}

	// Bounds defines the dimensions of the image generated by GoldenRekt.
	// It always returns a 50x50 pixel boundary.
	func (GoldenRekt) Bounds() image.Bounds {
		return image.Bounds{X1: 0, Y1: 0, X2: 50, Y2: 50}
	}

	// Pixels generates the pixel data for the GoldenRekt pattern.
	// It uses a recursive function to draw nested rectangles within
	// the defined bounds.
	func (GoldenRekt) Pixels(p image.PixelSetter) {
		// drawGoldenRekt is a recursive function that draws a rectangle
		// and then calls itself to draw smaller rectangles inside it,
		// following the golden ratio for scaling.
		var drawGoldenRekt func(x, y, width, height int)
		drawGoldenRekt = func(x, y, width, height int) {
			// Base case: Stop recursion when the rectangle is too small.
			if width <= 1 || height <= 1 {
				return
			}

			// Draw the current rectangle's edges.
			for i := x; i < x+width; i++ {
				p(i+1, y, 247, 175, 31)        // Top edge
				p(i+1, y+height-1, 200, 215, 200) // Bottom edge
			}
			for j := y; j < y+height; j++ {
				p(x+1, j, 255, 215, 100)        // Left edge
				p(x+width, j, 247, 175, 100)    // Right edge
			}

			// Calculate the dimensions of the next rectangle using the golden ratio.
			newWidth := int(float64(height) / 1.618)
			newHeight := int(float64(width) / 1.618)

			// Recursively draw the next rectangle centered within the current one.
			drawGoldenRekt(x+(width-newWidth)/2, y+(height-newHeight)/2, newWidth, newHeight)
		}

		// Start with the outermost rectangle.
		drawGoldenRekt(0, 0, 50, 50)
	}